{"version":3,"sources":["assets/golfBall.svg","App.js","reportWebVitals.js","index.js"],"names":["require","config","App","state","temp","humidity","windSpeed","weatherDescription","city","zip","myLat","myLon","placesToGolf","pickedGolfLat","pickedGolfLon","navigator","geolocation","getCurrentPosition","pos","coordinates","coords","setState","latitude","longitude","getForecast","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","this","alert","weatherAPI","axios","get","then","res","data","current","weather","description","wind_speed","catch","error","log","reverseGeocoding","results","address_components","long_name","short_name","headers","Authorization","process","params","term","categories","limit","radius","sort_by","open_now","businesses","className","src","logo","alt","filter","place","map","filteredPlaces","name","display_phone","location","display_address","rating","id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46d09c84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/golfBall.4daa5f5c.svg\";","import React, { Component } from \"react\";\n// import Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport logo from \"./assets/golfBall.svg\";\nimport \"./App.css\";\nrequire(\"dotenv\").config();\n\nclass App extends Component {\n  state = {\n    temp: \"\",\n    humidity: \"\",\n    windSpeed: \"\",\n    weatherDescription: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    myLat: \"\",\n    myLon: \"\",\n    placesToGolf: [],\n    pickedGolfLat: \"\",\n    pickedGolfLon: \"\",\n  };\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(\n      (pos) => {\n        let coordinates = pos.coords;\n        this.setState({ myLat: coordinates.latitude });\n        this.setState({ myLon: coordinates.longitude });\n        this.getForecast();\n      },\n      (err) => {\n        console.warn(`Error(${err.code}): ${err.message}`);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0,\n      }\n    );\n    if (this.state.myLat === \"undefined\") {\n      alert(\"Please Enable Your GPS and Refresh\")\n    }\n  }\n\n  getForecast() {\n    if (this.state.myLat !== \"undefined\") {\n      const weatherAPI =\n        // Openweather API\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        this.state.myLat +\n        \"&lon=\" +\n        this.state.myLon +\n        \"&units=imperial&exclude=minutely,alerts&appid=\" +\n        process.env.REACT_APP_WKEY;\n      axios\n        .get(weatherAPI)\n        .then((res) => {\n          this.setState({\n            temp: res.data.current.temp,\n            humidity: res.data.current.humidity,\n            weatherDescription: res.data.current.weather[0].description,\n            windSpeed: res.data.current.wind_speed,\n          });\n          return axios.get(weatherAPI);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      // Reverse Geocoding API\n      const reverseGeocoding =\n        \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\n        this.state.myLat +\n        \",\" +\n        this.state.myLon +\n        \"&key=\" +\n        process.env.REACT_APP_GKEY;\n      axios\n        .get(reverseGeocoding)\n        .then((res) => {\n          this.setState({\n            city: res.data.results[0].address_components[2].long_name,\n            state: res.data.results[0].address_components[4].short_name,\n            zip: res.data.results[0].address_components[6].long_name,\n          });\n          return axios.get(reverseGeocoding);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      console.log(\"Something Went Wrong!!!\");\n    }\n    // Yelp API\n    const yelpAPI = axios.get(\n      `${\"https://corsanywhere.herokuapp.com/\"}https://api.yelp.com/v3/businesses/search`,\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_YKEY}`,\n        },\n        params: {\n          term: \"golf\",\n          categories: \"golf\",\n          limit: 50,\n          radius: 40000,\n          sort_by: \"distance\",\n          open_now: true,\n          latitude: this.state.myLat,\n          longitude: this.state.myLon,\n        },\n      }\n    );\n    return yelpAPI\n      .then((res) => {\n        this.setState({ placesToGolf: res.data.businesses });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <br />\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <br />\n            {/* <Button\n              className=\"golfButton\"\n              variant=\"success\"\n              onClick={this.forecastButton}\n              onTouchStart={this.forecastButton}\n            >\n              <h2 className=\"foreButton\">FORE-CAST</h2>\n            </Button>\n            <br /> */}\n            <section className=\"section\">\n              <h3 className=\"section\">Temp: {this.state.temp} Fehrenheit</h3>\n              <h5 className=\"section\">Humidity: {this.state.humidity}%</h5>\n              <h5 className=\"section\">\n                Wind Speed: {this.state.windSpeed} mph\n              </h5>\n              <h5 className=\"section\">\n                Forecast: {this.state.weatherDescription}\n              </h5>\n              <h3 className=\"section\">\n                Your Location:\n                {\" \" +\n                  this.state.city +\n                  \" \" +\n                  this.state.state +\n                  \" \" +\n                  this.state.zip}\n              </h3>\n              <hr className=\"hr\" />\n              <h3>Golf Results Closest To Furthest From You:</h3>\n              <hr className=\"hr\" />\n              <div>\n                {this.state.placesToGolf\n                  .filter((place) => place)\n                  .map((filteredPlaces) => (\n                    <header key={filteredPlaces.id}>\n                      <h2 className=\"section\">{filteredPlaces.name}</h2>\n                      <h4 className=\"section\">\n                        {filteredPlaces.display_phone}\n                      </h4>\n                      <h4 className=\"section\">\n                        {filteredPlaces.location.display_address[0]}\n                      </h4>\n                      <h4 className=\"section\">\n                        {filteredPlaces.location.display_address[1]}\n                      </h4>\n                      <h4 className=\"section\">\n                        {filteredPlaces.location.display_address[2]}\n                      </h4>\n                      <h4 className=\"section\">\n                        Rating: {filteredPlaces.rating}/5\n                      </h4>\n                      <hr className=\"hr\" />\n                    </header>\n                  ))}\n              </div>\n            </section>\n          </header>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}